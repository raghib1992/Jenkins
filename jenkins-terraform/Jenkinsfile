pipeline {

    parameters {
        string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'nlb_http_health_checks', defaultValue: true, description: 'nlb parameters to allow for HTTP checks if nlb_http_health_checks_enabled is set to “true”')

    }


     environment {
        AWS_ACCESS_KEY_ID                     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY                 = credentials('AWS_SECRET_ACCESS_KEY')
        TF_VAR_nlb_http_health_checks_enabled = "${nlb_http_health_checks}"
    }

   agent  any

    stages {
        // stage('checkout') {
        //     steps {
        //         script{
        //             dir("terraform")
        //             {
        //                 git (
        //                     url: "https://github.com/raghib1992/jenkins-terraform.git",
        //                     credentialsId: 'Github_PAT',
        //                     branch: '*'
        //                 )
        //             }
        //         }
        //     }
        // }
        stage('Plan') {
            steps {
                sh 'pwd; ls -ltr; terraform init -input=false'
                sh 'echo "Hello I am qa branch"'
                // sh 'pwd;cd terraform ; terraform init -input=false'
                // sh 'pwd;cd terraform ; terraform workspace new ${environment}'
                // sh 'pwd;cd terraform ; terraform workspace select ${environment}'
                sh 'export TF_VAR_nlb_http_health_checks_enabled=${nlb_http_health_checks}'
                sh "pwd;terraform plan -input=false -out tfplan "
                sh 'pwd;terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
           }

           steps {
               script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                sh "pwd; terraform apply -input=false tfplan"
            }
        }
    }    
}