@Library('saas-shlib') _

import groovy.json.JsonSlurper
import org.apache.commons.codec.digest.DigestUtils

def awsCityRegionMap = [
        "N. Virginia" : "us-east-1",
        "Ohio" : "us-east-2",
        "N. California" : "us-west-1",
        "Oregon" : "us-west-2",
        "Cape Town" : "af-south-1",
        "Hong Kong" : "ap-east-1",
        "Mumbai" : "ap-south-1",
        "Osaka" : "ap-northeast-3",
        "Seoul" : "ap-northeast-2",
        "Singapore" : "ap-southeast-1",
        "Sydney" : "ap-southeast-2",
        "Tokyo" : "ap-northeast-1",
        "Central" : "ca-central-1",
        "Frankfurt" : "eu-central-1",
        "Ireland" : "eu-west-1",
        "London" : "eu-west-2",
        "Milan" : "eu-south-1",
        "Paris" : "eu-west-3",
        "Stockholm" : "eu-north-1",
        "Bahrain" : "me-south-1",
        "Sao Paulo" : "sa-east-1"
]
def cityList = awsCityRegionMap.keySet().toList()
def region = null
// def IS_NEW_BRANCH = true
def terraformCmd = 'terraform-13.6'

def processInputParams(awsCityRegionMap, region) {
    if (!awsCityRegionMap.containsKey(city)) {
        currentBuild.result = 'ABORTED'
        error('city parameter provided can\'t be matched with any AWS region available, double check that the city is available in AWS!')
    }
    else {
        region = awsCityRegionMap[city]
        echo "AWS region for deployment is ${region}"
    }
    echo 'Validation completed successfully!'
    return region
}

// CODE_CHANGES = getGitChanges()

pipeline {
    // agent any
    agent {
        node {
            label 'saas-deeploy'
        }
    }
    environment {
        AWS_REGION = 'us-west-2'
        AWS_DEFAULT_REGION = 'us-west-2'
    }
    parameters {
        choice name: 'CITY', choices: cityList, description: 'City for SaaS-global job'
        booleanParam(name: 'run_script', defaultValue: false, description: 'when to push the code to to allow not to run script')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    stages {
        stage ('Allow_script') {
            when {
                expression { params.run_script == true}
            }
            stages {
                stage('initialize terraform') {
                    steps {
                        echo 'Creating new terraform.tfvars file as per new inputs'
                        script {
                            region = processInputParams(awsCityRegionMap, region)
                            sh """
                                echo REGION = \\\"${region}\\\" >> terraform.tfvars
                                cat infrastructure/us-west-2/terraform.tfvars
                                ${terraformCmd} init
                                """
                        }
                    }
                }

                stage('terraforma_plan') {
                    steps {
                        sh """
                            ${terraformCmd} workspace show
                            pwd;${terraformCmd} plan -out tfplan -input=false
                            pwd;${terraformCmd} show -no-color tfplan > tfplan.txt
                            """
                    }
                }

                stage('Approval') {
                    when {
                        not {
                            equals expected: true, actual: params.autoApprove
                        }
                    }
                    steps {
                        script {
                                def plan = readFile 'tfplan.txt'
                                input message: "Do you want to apply the plan?",
                                parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                        }
                    }
                }
                stage ('terraform_apply') {
                    steps {
                        echo 'running apply stage'
                        sh "pwd;${terraformCmd} apply -input=false tfplan"
                    }
                }
            }
        }   
    }
}